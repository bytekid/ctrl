INCLUDE ints ;

DECLARE
  !MIXED!bv32"!": (BitVec 32) ;
  =.32		: (BitVec 32) * (BitVec 32) => Bool (infix 70)    ;
  !=.32		: (BitVec 32) * (BitVec 32) => Bool (infix 70)    ;
  <s.32		: (BitVec 32) * (BitVec 32) => Bool (infix 70)    ;
  <u.32		: (BitVec 32) * (BitVec 32) => Bool (infix 70)    ;
  <=s.32	: (BitVec 32) * (BitVec 32) => Bool (infix 70)    ;
  <=u.32	: (BitVec 32) * (BitVec 32) => Bool (infix 70)    ;
  >s.32		: (BitVec 32) * (BitVec 32) => Bool (infix 70)    ;
  >u.32		: (BitVec 32) * (BitVec 32) => Bool (infix 70)    ;
  >=s.32	: (BitVec 32) * (BitVec 32) => Bool (infix 70)    ;
  >=u.32	: (BitVec 32) * (BitVec 32) => Bool (infix 70)    ;

  ~.32		: (BitVec 32) => (BitVec 32);
  &.32		: (BitVec 32) * (BitVec 32) => (BitVec 32) (l-infix 150) ;
  |.32		: (BitVec 32) * (BitVec 32) => (BitVec 32) (l-infix 100) ;
  ^.32		: (BitVec 32) * (BitVec 32) => (BitVec 32) (l-infix 100) ;

  neg.32	: (BitVec 32) => (BitVec 32);
  +.32		: (BitVec 32) * (BitVec 32) => (BitVec 32) (l-infix 100);
  -.32		: (BitVec 32) * (BitVec 32) => (BitVec 32) (l-infix 1000);
  *.32		: (BitVec 32) * (BitVec 32) => (BitVec 32) (l-infix 150);
  /s.32		: (BitVec 32) * (BitVec 32) => (BitVec 32) (l-infix 150);
  /u.32		: (BitVec 32) * (BitVec 32) => (BitVec 32) (l-infix 150);
  %s.32		: (BitVec 32) * (BitVec 32) => (BitVec 32) (l-infix 150);
  %u.32		: (BitVec 32) * (BitVec 32) => (BitVec 32) (l-infix 150);
  <<.32		: (BitVec 32) * (BitVec 32) => (BitVec 32) (r-infix 100);
  >>s.32	: (BitVec 32) * (BitVec 32) => (BitVec 32) (r-infix 100);
  >>u.32	: (BitVec 32) * (BitVec 32) => (BitVec 32) (r-infix 100);

  isPowerOf2.32		        :  (BitVec 32) => Bool;
  isPowerOf2OrZero.32	    :  (BitVec 32) => Bool;
  isSignBit.32	          :  (BitVec 32) => Bool;
  MaskedValueIsZero.32    :  (BitVec 32) * (BitVec 32) => Bool;
  WillNotOverflowSignedAdd.32	 :  (BitVec 32) * (BitVec 32) => Bool;
  WillNotOverflowUnsignedAdd.32 :  (BitVec 32) * (BitVec 32) => Bool;
  WillNotOverflowSignedSub.32	 :  (BitVec 32) * (BitVec 32) => Bool;
  WillNotOverflowUnsignedSub.32 :  (BitVec 32) * (BitVec 32) => Bool;
  WillNotOverflowUnsignedMul.32 :  (BitVec 32) * (BitVec 32) => Bool;
  WillNotOverflowSignedMul.32 :  (BitVec 32) * (BitVec 32) => Bool;
  WillNotOverflowUnsignedShl.32 :  (BitVec 32) * (BitVec 32) => Bool;
  isShiftedMask.32	      :  (BitVec 32) => Bool;
  
  countLeadingZeros.32    :  (BitVec 32) => (BitVec 32);
  countTrailingZeros.32   :  (BitVec 32) => (BitVec 32);
  width.32                :  (BitVec 32) => (BitVec 32);
  log2.32                 :  (BitVec 32) => (BitVec 32);
  computeKnownZeroBits.32 :  (BitVec 32) => (BitVec 32);
  sext.32                 :  (BitVec 32) => (BitVec 32);
  zext.32                 :  (BitVec 32) => (BitVec 32);
  trunc.32                :  (BitVec 32) => (BitVec 32);
  abs.32                  :  (BitVec 32) => (BitVec 32);
  umax.32	                : (BitVec 32) * (BitVec 32) => (BitVec 32);
  max.32	                : (BitVec 32) * (BitVec 32) => (BitVec 32);
  icmp_slt.32            : (BitVec 32) * (BitVec 32) => (BitVec 32);
  icmp_ult.32            : (BitVec 32) * (BitVec 32) => (BitVec 32);
  icmp_eq.32             : (BitVec 32) * (BitVec 32) => (BitVec 32);
  icmp_eq.32             : (BitVec 32) * (BitVec 32) => (BitVec 32);

WELLFOUNDED >s.32, >u.32 ;

SMT-RENAMINGS
  <s.32 	-> bvslt;
  <u.32 	-> bvult;
  <=s.32   	-> bvsle;
  <=u.32  	-> bvule;
  >s.32 	-> bvsgt;
  >u.32 	-> bvugt;
  >=s.32   	-> bvsge;
  >=u.32  	-> bvuge;

  +.32 		-> bvadd;
  -.32    	-> bvsub;
  *.32 		-> bvmul;
  /s.32		-> bvsdiv;
  /u.32 	-> bvudiv;
  %s.32 	-> bvsrem;
  %u.32 	-> bvurem;

  <<.32 	-> bvshl;
  >>s.32	-> bvashr;
  >>u.32  	-> bvlshr;

  ~.32		-> bvnot;
  &.32		-> bvand;
  |.32		-> bvor;
  ^.32		-> bvxor;

SMT-TRANSLATIONS
  !=.32(x, y)	-> (not (= x y));
  =.32(x, y)	-> (= x y);
  neg.32(x)	-> (bvneg x) ;
  isPowerOf2.32(x) -> (and (= (bvand x (bvsub x #x00000001)) #x00000000) (not (= x #x00000000))) ;
  isPowerOf2OrZero.32(x) -> (= (bvand x (bvsub x #x00000001)) #x00000000) ;
  isSignBit.32(x) -> (= ((_ extract 31 31) x) #b1) ;
  countLeadingZeros.32(x) ->
   (ite (= x #x00000000) #x00000020
   (ite (bvult x #x00000002) #x0000001f
   (ite (bvult x #x00000004) #x0000001e
   (ite (bvult x #x00000008) #x0000001d
   (ite (bvult x #x00000010) #x0000001c
   (ite (bvult x #x00000020) #x0000001b
   (ite (bvult x #x00000040) #x0000001a
   (ite (bvult x #x00000080) #x00000019
   (ite (bvult x #x00000100) #x00000018
   (ite (bvult x #x00000200) #x00000017
   (ite (bvult x #x00000400) #x00000016
   (ite (bvult x #x00000800) #x00000015
   (ite (bvult x #x00001000) #x00000014
   (ite (bvult x #x00002000) #x00000013
   (ite (bvult x #x00004000) #x00000012
   (ite (bvult x #x00008000) #x00000011
   (ite (bvult x #x00010000) #x00000010
   (ite (bvult x #x00020000) #x0000000f
   (ite (bvult x #x00040000) #x0000000e
   (ite (bvult x #x00080000) #x0000000d
   (ite (bvult x #x00100000) #x0000000c
   (ite (bvult x #x00200000) #x0000000b
   (ite (bvult x #x00400000) #x0000000a
   (ite (bvult x #x00800000) #x00000009
   (ite (bvult x #x01000000) #x00000008
   (ite (bvult x #x02000000) #x00000007
   (ite (bvult x #x04000000) #x00000006
   (ite (bvult x #x08000000) #x00000005
   (ite (bvult x #x10000000) #x00000004
   (ite (bvult x #x20000000) #x00000003
   (ite (bvult x #x40000000) #x00000002
   (ite (bvult x #x80000000) #x00000001 #x00000000
   ))))))))))))))))))))))))))))))));
  countTrailingZeros.32(x) ->
    (ite (= ((_ extract 0 0) x) #b1) #x00000000
    (ite (= ((_ extract 1 1) x) #b1) #x00000001
    (ite (= ((_ extract 2 2) x) #b1) #x00000002
    (ite (= ((_ extract 3 3) x) #b1) #x00000003
    (ite (= ((_ extract 4 4) x) #b1) #x00000004
    (ite (= ((_ extract 5 5) x) #b1) #x00000005
    (ite (= ((_ extract 6 6) x) #b1) #x00000006
    (ite (= ((_ extract 7 7) x) #b1) #x00000007
    (ite (= ((_ extract 8 8) x) #b1) #x00000008
    (ite (= ((_ extract 9 9) x) #b1) #x00000009
    (ite (= ((_ extract 10 10) x) #b1) #x0000000a
    (ite (= ((_ extract 11 11) x) #b1) #x0000000b
    (ite (= ((_ extract 12 12) x) #b1) #x0000000c
    (ite (= ((_ extract 13 13) x) #b1) #x0000000d
    (ite (= ((_ extract 14 14) x) #b1) #x0000000e
    (ite (= ((_ extract 15 15) x) #b1) #x0000000f
    (ite (= ((_ extract 16 16) x) #b1) #x00000010
    (ite (= ((_ extract 17 17) x) #b1) #x00000011
    (ite (= ((_ extract 18 18) x) #b1) #x00000012
    (ite (= ((_ extract 19 19) x) #b1) #x00000013
    (ite (= ((_ extract 20 20) x) #b1) #x00000014
    (ite (= ((_ extract 21 21) x) #b1) #x00000015
    (ite (= ((_ extract 22 22) x) #b1) #x00000016
    (ite (= ((_ extract 23 23) x) #b1) #x00000017
    (ite (= ((_ extract 24 24) x) #b1) #x00000018
    (ite (= ((_ extract 25 25) x) #b1) #x00000019
    (ite (= ((_ extract 26 26) x) #b1) #x0000001a
    (ite (= ((_ extract 27 27) x) #b1) #x0000001b
    (ite (= ((_ extract 28 28) x) #b1) #x0000001c
    (ite (= ((_ extract 29 29) x) #b1) #x0000001d
    (ite (= ((_ extract 30 30) x) #b1) #x0000001e
    (ite (= ((_ extract 31 31) x) #b1) #x0000001f #x00000020)
    )))))))))))))))))))))))))))))));
  width.32(x) -> #x00000020 ;
  log2.32(x) ->
    (ite (= ((_ extract 31 31) x) #b1) #x0000001f
    (ite (= ((_ extract 30 30) x) #b1) #x0000001e
    (ite (= ((_ extract 29 29) x) #b1) #x0000001d
    (ite (= ((_ extract 28 28) x) #b1) #x0000001c
    (ite (= ((_ extract 27 27) x) #b1) #x0000001b
    (ite (= ((_ extract 26 26) x) #b1) #x0000001a
    (ite (= ((_ extract 25 25) x) #b1) #x00000019
    (ite (= ((_ extract 24 24) x) #b1) #x00000018
    (ite (= ((_ extract 23 23) x) #b1) #x00000017
    (ite (= ((_ extract 22 22) x) #b1) #x00000016
    (ite (= ((_ extract 21 21) x) #b1) #x00000015
    (ite (= ((_ extract 20 20) x) #b1) #x00000014
    (ite (= ((_ extract 19 19) x) #b1) #x00000013
    (ite (= ((_ extract 18 18) x) #b1) #x00000012
    (ite (= ((_ extract 17 17) x) #b1) #x00000011
    (ite (= ((_ extract 16 16) x) #b1) #x00000010
    (ite (= ((_ extract 15 15) x) #b1) #x0000000f
    (ite (= ((_ extract 14 14) x) #b1) #x0000000e
    (ite (= ((_ extract 13 13) x) #b1) #x0000000d
    (ite (= ((_ extract 12 12) x) #b1) #x0000000c
    (ite (= ((_ extract 11 11) x) #b1) #x0000000b
    (ite (= ((_ extract 10 10) x) #b1) #x0000000a
    (ite (= ((_ extract 9 9) x) #b1) #x00000009
    (ite (= ((_ extract 8 8) x) #b1) #x00000008
    (ite (= ((_ extract 7 7) x) #b1) #x00000007
    (ite (= ((_ extract 6 6) x) #b1) #x00000006
    (ite (= ((_ extract 5 5) x) #b1) #x00000005
    (ite (= ((_ extract 4 4) x) #b1) #x00000004
    (ite (= ((_ extract 3 3) x) #b1) #x00000003
    (ite (= ((_ extract 2 2) x) #b1) #x00000002
    (ite (= ((_ extract 1 1) x) #b1) #x00000001 #x00000000)
    ))))))))))))))))))))))))))))));
  MaskedValueIsZero.32(x, y) -> (= (bvand x y) #x00000000);
  computeKnownZeroBits.32(x) -> (bvor x #x00000000);
  trunc.32(x) -> (bvor x #x00000000);
  sext.32(x) -> (bvor x #x00000000);
  zext.32(x) -> (bvor x #x00000000);
  WillNotOverflowUnsignedAdd.32(x,y) ->
    (= (bvadd ((_ zero_extend 1) x) ((_ zero_extend 1) y)) ((_ zero_extend 1) (bvadd x y)));
  WillNotOverflowSignedAdd.32(x,y) ->
    (= (bvadd ((_ sign_extend 1) x) ((_ sign_extend 1) y)) ((_ sign_extend 1) (bvadd x y)));
  WillNotOverflowUnsignedSub.32(x,y) ->
    (= (bvsub ((_ zero_extend 1) x) ((_ zero_extend 1) y)) ((_ zero_extend 1) (bvsub x y)));
  WillNotOverflowSignedSub.32(x,y) ->
    (= (bvsub ((_ sign_extend 1) x) ((_ sign_extend 1) y)) ((_ sign_extend 1) (bvsub x y)));
  abs.32(x) -> (ite (bvuge x #x00000000) x (bvnot x));
  isShiftedMask.32(x) -> (not (= (bvor (bvsub x #x00000001) x) #x00000000));
  WillNotOverflowUnsignedMul.32(x,y) ->
    (= (bvadd ((_ zero_extend 32) x) ((_ zero_extend 32) y)) ((_ zero_extend 32) (bvmul x y)));
  WillNotOverflowSignedMul.32(x,y) ->
    (= (bvadd ((_ sign_extend 32) x) ((_ sign_extend 32) y)) ((_ sign_extend 32) (bvmul x y)));
  WillNotOverflowUnsignedShl.32(x,y) -> (= (bvlshr (bvshl x y) y) x);
  umax.32(x,y) -> (ite (bvuge x y) x y);
  max.32(x,y) -> (ite (bvsge x y) x y);
  icmp_slt.32(x,y) -> (ite (bvslt x y) #x00000001 #x00000000);
  icmp_ult.32(x,y) -> (ite (bvult x y) #x00000001 #x00000000);
  icmp_neq.32(x,y) -> (ite (not (= x y)) #x00000001 #x00000000);
  icmp_eq.32(x,y) -> (ite (= x y) #x00000001 #x00000000);
