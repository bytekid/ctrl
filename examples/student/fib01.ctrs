THEORY ints     ;
LOGIC QF_LIA    ;
SOLVER internal ;

SIGNATURE fib, fastfib, badfib, u, w1, w2, return, !INTEGER ;

RULES
  fastfib(num)       -> u(num, 1, 1, rnd)                                 ;
  u(num, f0, f1, f2) -> u(num - 1, f1, f1 + f0, f1 + f0) [num >= 2]       ;
  u(num, f0, f1, f2) -> return(f1)                       [not (num >= 2)] ;

  fib(x)             -> return(0)                        [x <= 0]         ;
  fib(1)             -> return(1)                                         ;
  fib(x)             -> w1(fib(x - 1), fib(x - 2))       [x - 2 >= 0]     ;
  w1(return(x),return(y)) -> return(x + y)                                ;
  
  badfib(x)          -> return(1)                        [x <= 0]         ;
  badfib(x)          -> return(1)                        [x = 1]          ;
  badfib(x)          -> w2(badfib(x - 1), badfib(x - 2)) [x > 1]          ;
  w2(return(x),return(y)) -> return(x + y)                                ;

QUERY equivalence badfib(n) -><- fastfib(n) [true]

END OF FILE

Student program:

int fastfib(int num){
  int f0,f1,f2;

  for(f0=f1=1;num>=2;num--){
    f2=f1+f0;
    f0=f1;
    f1=f2;
  }

  return f1;

}

Comments:

Note that this program is incorrect: it incorrectly returns 1 if
num <= 0, and otherwise generates the numbers 1, 2, 3, 5, 8, ...
instead of 1, 1, 2, 3, 5, ...

Thus, it is not surprising that the correctness proof fails when we
test:
  
  equivalence fib(n) -><- fastfib(n) [true]

To still test the strength of the tool, we tested the alternative
equivalence.  Here, we fail, because the generalised equation we
obtain does not lead to a terminating system: generalising v_5 = 1
also loses the information that 1 <= v_5.

Derivation if we are willing to ignore this matter of termination:

swap
simplify 11
swap
expand
simplify X1 1
simplify X1 2
case 2
case 1
simplify 1
swap
simplify 10
simplify 9
eq-delete
delete
simplify 9 1
simplify 1
swap
simplify 10
simplify 10
simplify 9
delete
simplify 10 1 
simplify 10 1 
swap
simplify 10
simplify 10
simplify 10
generalise v5 v6
force-expand          <-- this says to ignore termination
swap
simplify 9 1 
simplify 9 2 
simplify 1
delete
swap
simplify 10 1 
simplify 10 2 
swap
simplify X2
eq-delete
delete
swap
simplify 9
eq-delete
delete
swap
simplify 9
eq-delete
delete

