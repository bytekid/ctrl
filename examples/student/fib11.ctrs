THEORY ints     ;
LOGIC QF_LIA    ;
SOLVER internal ;

SIGNATURE fib, fastfib, u : Int * Int * Int * Int * Int => Unit, v, w, return, !INTEGER ;

RULES
  fib(x)          -> return(0)                  [x <= 0]                     ;   
  fib(1)          -> return(1)                                               ;   
  fib(x)          -> w(fib(x - 1), fib(x - 2))  [x - 2 >= 0]                 ;   
  w(return(x), return(y)) -> return(x + y)                                   ;

  fastfib(n)      -> u(n, 1, 0, 0, rnd)                                                           ;
  u(n,pre1,pre2,val,i) -> return(0)                               [n <= 0]                        ;
  u(n,pre1,pre2,val,i) -> return(1)                               [not (n <= 0) /\ n = 1]         ;
  u(n,pre1,pre2,val,i) -> v(n,pre1,pre2,val,2)                    [not (n <= 0) /\ not (n = 1)]   ;
  v(n,pre1,pre2,val,i) -> v(n,pre1 + pre2,pre1,pre1 + pre2,i + 1) [i <= n]                        ;
  v(n,pre1,pre2,val,i) -> return(-1)                              [not (i <= n) /\ val < 0]       ;
  v(n,pre1,pre2,val,i) -> return(val)                             [not (i <= n) /\ not (val < 0)] ;

QUERY equivalence fib(n) -><- fastfib(n) [true]

END OF FILE

Student program:

int fastfib(int n){
  int pre1=1,pre2=0,val=0,i;

  if(n<=0){
    return 0;
  }

  if(n==1){
    return 1;
  }

  for(i=2;i<=n && val>=0;i++){
    val=pre1+pre2;
    pre2=pre1;
    pre1=val;
  }

  if(val<0){
    return -1;
  }

  return val;
}

Comments:

The implementation looks correct.  It is unclear why Ctrl fails to
find a derivation for it.

