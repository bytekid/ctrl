THEORY ints     ;
LOGIC QF_LIA    ;
SOLVER internal ;

SIGNATURE fib, fastfib, u : Int * Int * Int * Int * Int => Unit, v, w, return, !INTEGER ;

RULES
  fib(x)           -> return(0)                   [x <= 0]       ;
  fib(1)           -> return(1)                                  ;
  fib(x)           -> w(fib(x - 1), fib(x - 2))   [x - 2 >= 0]   ;
  w(return(x), return(y))  -> return(x + y)                      ;
  fastfib(n)       -> u(n, rnd0, rnd1, rn2, rnd3)                ;
  u(0, i, r, o, t) -> return(0)                                  ;
  u(n, i, r, o, t) -> v(n, 2, 1, 0, t)            [n # 0]        ;
  v(n, i, r, o, t) -> v(n, i + 1, r + o, r, r)    [i <= n]       ;
  v(n, i, r, o, t) -> return(r)                   [not (i <= n)] ;

QUERY equivalence fib(n) -><- fastfib(n) [n >= 0]

END OF FILE

Student program:

int fastfib(int n) {
  int i, result, old_result, temp;
  if (!n) return 0;

  result = 1;
  old_result = 0;

  for (i = 2; i <= n; i++) {
    temp = result;
    result = result + old_result;
    old_result = temp;
  }

  return result;
}

Comments:

This program does not follow the specifications, as it returns 1 given
a negative integer, rather than 0.
Thus, it is not surprising that the correctness proof fails when we test:
  
    equivalence fib(n) -><- fastfib(n) [true]

We altered the constraint to avoid this issue.

