THEORY ints     ;
LOGIC QF_LIA    ;
SOLVER internal ;

SIGNATURE fib, fastfib, u : Int * Int * Int * Int * Int => Unit, v, w, tmp, return, !INTEGER ;

RULES
  fib(x)             -> return(0)                   [x <= 0]     ;
  fib(1)             -> return(1)                                ;
  fib(x)             -> tmp(fib(x - 1), fib(x - 2)) [x - 2 >= 0] ;
  tmp(return(x), return(y)) -> return(x + y)                     ;

  fastfib(x)         -> u(x, 1, 0, rnd1, rnd2)                                               ;
  u(n, p1, p2, p, i) -> return(-1)               [n < 0]                                     ;
  u(n, p1, p2, p, i) -> return(0)                [not (n < 0) /\ n = 0]                      ;
  u(n, p1, p2, p, i) -> return(1)                [not (n < 0) /\ not (n = 0) /\ n = 1]       ;
  u(n, p1, p2, p, i) -> v(n, p1, p2, p, 1)       [not (n < 0) /\ not (n = 0) /\ not (n = 1)] ;
  v(n, p1, p2, p, i) -> w(n, p1, p2, p1 + p2, i) [i < n]                                     ;
  v(n, p1, p2, p, i) -> return(p)                [not (i < n)]                               ;
  w(n, p1, p2, p, i) -> return(-2)               [p < p1]                                    ;
  w(n, p1, p2, p, i) -> v(n, p, p1, p, i + 1)    [not (p < p1)]                              ;

QUERY equivalence fib(n) -><- fastfib(n) [n >= 0]

END OF FILE

Student program:

int fastfib(int n){
  int previous1Fib = 1; // Fib(n - 1)
  int previous2Fib = 0; // Fib(n - 2)
  int presentFib; // Fib(n)
  int i;
        
  if(n < 0){
    return -1;
  }else if(n == 0){
    return 0;
  }else if(n == 1){
    return 1;
  }else{
    for(i = 1; i < n; i++){
      presentFib = previous1Fib + previous2Fib;
                        
      if(presentFib < previous1Fib){
        return -2;
      }
      previous2Fib = previous1Fib;
      previous1Fib = presentFib;
    }
  }

  return presentFib;
}

Comments:

Note that this program is incorrect: if n < 0, -1 is returned instead of 0.
Thus, it is not surprising that the correctness proof fails when we test:
  
    equivalence fib(n) -><- fastfib(n) [true]

Unfortunately, the alternative equation still fails because our termination
module cannot handle the first expansion, to get rid of fib(n).  It is
not clear why the module fails here.

