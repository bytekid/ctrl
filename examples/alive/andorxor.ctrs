THEORY bitvectors;
LOGIC QF_UFBV;
SOLVER external;
SIGNATURE Xor, icmp_sge, icmp_ugt, lshr, icmp_sgt, icmp_uge, sexti11, umax, icmp_ne, select, icmp_eq, sub, add, zext_11, True, trunc_11, add_i29, sext_11, sext, sext_i1, icmp, Or, trunc, And, icmp_ult, False, icmp_slt, zexti11, icmp_ule, trunci11, zext, shl, ashr,  !BITVECTOR;

RULES
    And(Xor(X, C1), C2) -> Xor(And(X, C2), CL0)  [ ((C1 & C2) = CL0)] ;
    And(Or(X, C1), C2) -> And(Or(X, CL0), C2)  [ ((C1 & C2) = CL0)] ;
    And(Or(X, C1), C2) -> Or(And(X, CL0), C1)  [ (((C2 ^ (C1 & C2)) = CL0) /\ ((C1 & C2) = C1))] ;
    And(add(X, C1), C2) -> And(X, C2)  [ (isPowerOf2(C2) /\ (((C1 & (C2 -i #x00000001)) = #x00000000) /\ ((C2 & C1) = #x00000000)))] ;
    And(add(X, C1), C2) -> Xor(And(X, C2), C2)  [ (isPowerOf2(C2) /\ (((C1 & (C2 -i #x00000001)) = #x00000000) /\ ((C2 & C1) != #x00000000)))] ;
    And(shl(X, C1), C2) -> shl(X, C1)  [ ((C2 & (#xffffffff << C1)) = (#xffffffff << C1))] ;
    And(shl(X, C1), C2) -> And(shl(X, C1), CL0)  [ (((C2 & (#xffffffff << C1)) = CL0) /\ (((C2 & (#xffffffff << C1)) != (#xffffffff << C1)) /\ ((C2 & (#xffffffff << C1)) != C2)))] ;
    And(lshr(X, C1), C2) -> lshr(X, C1)  [ ((C2 & lshr_th(#xffffffff, C1)) = lshr_th(#xffffffff, C1))] ;
    And(lshr(X, C1), C2) -> And(lshr(X, C1), CL0)  [ (((C2 & lshr_th(#xffffffff, C1)) = CL0) /\ ((C2 & lshr_th(#xffffffff, C1)) != lshr_th(#xffffffff, C1)))] ;
    And(ashr(X, C1), C2) -> And(lshr(X, C1), C2)  [ (hasOneUse /\ ((C2 & lshr_th(#xffffffff, C1)) = C2))] ;
    And(icmp_sge(X, C1), icmp_slt(X, C2)) -> False  [ ((C1 i<= C2) /\ (C1 = C2))] ;
    And(icmp_sge(X, C1), icmp_slt(X, C2)) -> icmp_slt(X, C2)  [ ((C1 i<= C2) /\ (C1 = (#x00000001 << (width(C1) -i #x00000001))))] ;
    And(icmp_sge(X, C1), icmp_slt(X, C2)) -> icmp_ult(add(X, neg(C1)), CL0)  [ (((neg(C1) +i C2) = CL0) /\ (C1 i<= C2))] ;
    Or(icmp_slt(X, C1), icmp_sge(X, C2)) -> True  [ ((C1 i<= C2) /\ (C1 = C2))] ;
    Or(icmp_slt(X, C1), icmp_sge(X, C2)) -> icmp_sgt(X, CL0)  [ (((C2 -i #x00000001) = CL0) /\ ((C1 i<= C2) /\ ((C1 != C2) /\ (C1 = (#x00000001 << (width(C1) -i #x00000001))))))] ;
    Or(icmp_slt(X, C1), icmp_sge(X, C2)) -> icmp_ugt(add(X, neg(C1)), CL0)  [ (((neg(C1) +i (C2 -i #x00000001)) = CL0) /\ ((C1 i<= C2) /\ (C1 != C2)))] ;
    And(add(And(A, C1), B), C2) -> And(add(A, B), C2)  [ (((C1 & C2) = C2) /\ (isPowerOf2OrZero((C2 +i #x00000001)) \/ (isShiftedMask(C2) /\ MaskedValueIsZero(B, ((#x00000001 << (width(C2) -i countLeadingZeros(((C2 -i #x00000001) ^ C2)))) -i #x00000001)))))] ;
    And(add(Or(A, C1), B), C2) -> And(add(A, B), C2)  [ (isPowerOf2OrZero((C2 +i #x00000001)) /\ ((C1 & C2) = #x00000000))] ;
    And(sub(Xor(A, C1), B), C2) -> And(sub(A, B), C2)  [ (isPowerOf2OrZero((C2 +i #x00000001)) /\ ((C1 & C2) = #x00000000))] ;
    icmp_slt(X, #x00000000) -> icmp_ne(And(X, CL0), #x00000000)  [ ((#x00000001 << (width(X) -i #x00000001)) = CL0)] ;
    icmp_sgt(X, #xffffffff) -> icmp_eq(And(X, CL0), #x00000000)  [ ((#x00000001 << (width(X) -i #x00000001)) = CL0)] ;
    icmp_ult(X, C) -> icmp_eq(And(X, neg(C)), #x00000000)  [ isPowerOf2(C)] ;
    icmp_ugt(X, C) -> icmp_ne(And(X, ~(C)), #x00000000)  [ isPowerOf2((C +i #x00000001))] ;
    And(icmp_eq(And(a, b), #x00000000), icmp_eq(And(a, d), #x00000000)) -> icmp_eq(And(a, Or(b, d)), #x00000000);
    And(icmp_eq(And(a, b), b), icmp_eq(And(a, d), d)) -> icmp_eq(And(a, Or(b, d)), Or(b, d));
    And(icmp_eq(And(a, b), a), icmp_eq(And(a, d), a)) -> icmp_eq(And(a, And(b, d)), a);
    And(icmp_ne(And(a, C1), #x00000000), icmp_ne(And(a, C2), #x00000000)) -> icmp_ne(And(a, C1), #x00000000)  [ ((C1 & C2) = C1)] ;
    And(icmp_ne(And(a, C1), C1), icmp_ne(And(a, C2), C2)) -> icmp_ne(And(a, C1), C1)  [ ((C1 & C2) = C1)] ;
    And(icmp_ne(And(a, C1), a), icmp_ne(And(a, C2), a)) -> icmp_ne(And(a, C1), a)  [ ((C1 | C2) = C1)] ;
    And(icmp_eq(And(a, C1), C2), icmp_eq(And(a, C3), C4)) -> icmp_eq(And(a, CL0), CL1)  [ (((C1 | C3) = CL0) /\ (((C2 | C4) = CL1) /\ ((((C1 & C3) & (C2 ^ C4)) = #x00000000) /\ (((C1 & C2) = C2) /\ ((C3 & C4) = C4)))))] ;
    And(icmp_sgt(a, b), icmp_ne(a, b)) -> icmp_sgt(a, b);
    And(icmp_ult(a, C), icmp_ult(b, C)) -> icmp_ult(Or(a, b), C)  [ isPowerOf2(C)] ;
    And(icmp_eq(a, #x00000000), icmp_eq(b, #x00000000)) -> icmp_eq(Or(a, b), #x00000000);
    And(icmp_eq(trunci11(x), C1), icmp_eq(And(x, C3), C2)) -> icmp_eq(And(x, CL0), CL1)  [ (((zext_th(C1) | C2) = CL1) /\ (((C3 | ((#x00000001 << width(C1)) -i #x00000001)) = CL0) /\ (((((#x00000001 << width(C1)) -i #x00000001) & C3) = #x00000000) /\ ((((#x00000001 << width(C1)) -i #x00000001) & C2) = #x00000000))))] ;
    And(icmp_eq(a, C1), icmp_eq(a, C2)) -> False  [ (C1 != C2)] ;
    And(icmp_eq(a, C1), icmp_ne(a, C1)) -> False;
    And(icmp_eq(a, C1), icmp_ne(a, C2)) -> icmp_eq(a, C1)  [ (C1 u< C2)] ;
    And(icmp_eq(a, C1), icmp_ult(a, C2)) -> icmp_eq(a, C1)  [ (C1 u< C2)] ;
    And(icmp_eq(a, C1), icmp_slt(a, C2)) -> icmp_eq(a, C1)  [ (C1 i< C2)] ;
    And(icmp_ne(a, C1), icmp_ult(a, C2)) -> icmp_ult(a, C1)  [ ((C1 u< C2) /\ (C1 = (C2 -i #x00000001)))] ;
    And(icmp_ne(a, C1), icmp_slt(a, C2)) -> icmp_slt(a, C1)  [ ((C1 i< C2) /\ (C1 = (C2 -i #x00000001)))] ;
    And(icmp_ne(a, C1), icmp_eq(a, C2)) -> icmp_eq(a, C2)  [ (C1 u< C2)] ;
    And(icmp_ne(a, C1), icmp_ugt(a, C2)) -> icmp_ugt(a, C2)  [ (C1 u< C2)] ;
    And(icmp_ne(a, C1), icmp_sgt(a, C2)) -> icmp_sgt(a, C2)  [ (C1 i< C2)] ;
    And(icmp_ne(a, C1), icmp_ne(a, C2)) -> icmp_ugt(add(a, neg(C1)), #x00000001)  [ ((C1 u< C2) /\ (C1 = (C2 -i #x00000001)))] ;
    And(icmp_ult(a, C1), icmp_eq(a, C2)) -> False  [ (C1 u< C2)] ;
    And(icmp_ult(a, C1), icmp_ugt(a, C2)) -> False  [ (C1 u< C2)] ;
    And(icmp_ult(a, C1), icmp_ne(a, C2)) -> icmp_ult(a, C1)  [ (C1 u< C2)] ;
    And(icmp_ult(a, C1), icmp_ult(a, C2)) -> icmp_ult(a, C1)  [ (C1 u< C2)] ;
    And(icmp_slt(a, C1), icmp_ne(a, C2)) -> icmp_slt(a, C1)  [ (C1 i< C2)] ;
    And(icmp_slt(a, C1), icmp_slt(a, C2)) -> icmp_slt(a, C1)  [ (C1 i< C2)] ;
    And(icmp_ugt(a, C1), icmp_eq(a, C2)) -> icmp_eq(a, C2)  [ (C1 u< C2)] ;
    And(icmp_ugt(a, C1), icmp_ugt(a, C2)) -> icmp_ugt(a, C2)  [ (C1 u< C2)] ;
    And(icmp_ugt(a, C1), icmp_ne(a, C2)) -> icmp_ugt(a, C2)  [ ((C1 u< C2) /\ (C2 = (C1 +i #x00000001)))] ;
    And(icmp_sgt(a, C1), icmp_eq(a, C2)) -> icmp_eq(a, C2)  [ (C1 i< C2)] ;
    And(icmp_sgt(a, C1), icmp_sgt(a, C2)) -> icmp_sgt(a, C2)  [ (C1 i< C2)] ;
    And(icmp_sgt(a, C1), icmp_ne(a, C2)) -> icmp_sgt(a, C2)  [ ((C1 i< C2) /\ (C2 = (C1 +i #x00000001)))] ;
    And(Xor(op0LHS, op0RHS), C) -> Xor(op0LHS, And(op0RHS, C))  [ MaskedValueIsZero(op0LHS, ~(C))] ;
    And(Or(op0LHS, op0RHS), C) -> Or(op0LHS, And(op0RHS, C))  [ MaskedValueIsZero(op0LHS, ~(C))] ;
    And(Xor(op0LHS, op0RHS), C) -> Xor(And(op0LHS, C), op0RHS)  [ MaskedValueIsZero(op0RHS, ~(C))] ;
    And(Or(op0LHS, op0RHS), C) -> Or(And(op0LHS, C), op0RHS)  [ MaskedValueIsZero(op0RHS, ~(C))] ;
    And(sub(A, B), C) -> And(sub(#x00000000, B), C)  [ MaskedValueIsZero(A, lshr_th(#xffffffff, countLeadingZeros(C)))] ;
    And(shl(#x00000001, op0RHS), #x00000001) -> zext(icmp_eq(op0RHS, #x00000000));
    And(lshr(#x00000001, op0RHS), #x00000001) -> zext(icmp_eq(op0RHS, #x00000000));
    And(trunc(And(x, C1)), C2) -> And(trunc(x), CL0)  [ ((trunc_th(C1) & C2) = CL0)] ;
    And(Xor(notOp0, #xffffffff), Xor(notOp1, #xffffffff)) -> Xor(Or(notOp0, notOp1), #xffffffff);
    And(Or(A, B), Xor(And(A, B), #xffffffff)) -> Xor(A, B);
    And(Xor(And(A, B), #xffffffff), Or(A, B)) -> Xor(A, B);
    And(Xor(A, B), A) -> And(A, Xor(B, #xffffffff));
    And(Or(Xor(A, #xffffffff), B), A) -> And(A, B);
    And(Xor(A, B), Xor(Xor(B, C), A)) -> And(Xor(A, B), Xor(C, #xffffffff));
    And(Or(A, B), Xor(Xor(A, #xffffffff), B)) -> And(A, B);
    And(sext(x), sext(y)) -> sext(And(x, y));
    And(zext(x), zext(y)) -> zext(And(x, y));
    And(trunc(x), trunc(y)) -> trunc(And(x, y));
    And(sext_i1(a), b) -> select(a, b, #x00000000);
    And(Xor(sext_i1(a), #xffffffff), b) -> select(a, #x00000000, b);
    Or(And(sext(Cond), C), And(B, Xor(sext(Cond), #xffffffff))) -> select(Cond, C, B);
    Or(And(sext(Cond), C), And(B, sext(Xor(Cond, #xffffffff)))) -> select(Cond, C, B);
    Or(And(sext(Cond), C), And(Xor(sext(Cond), #xffffffff), D)) -> select(Cond, C, D);
    Or(And(sext(Cond), C), And(sext(Xor(Cond, #xffffffff)), D)) -> select(Cond, C, D);
    Or(icmp_eq(And(A, K1), #x00000000), icmp_eq(And(A, K2), #x00000000)) -> icmp_ne(And(A, Or(K1, K2)), Or(K1, K2))  [ (isPowerOf2(K1) /\ isPowerOf2(K2))] ;
    Or(icmp_ult(add_i29(A, C1), C3), icmp_ult(add(A, C2), C3)) -> icmp_ult(add(And(A, ~(CL0)), umax(C1, C2)), C3)  [ (((C1 ^ C2) = CL0) /\ ((C1 u> C3) /\ ((C2 u> C3) /\ (isPowerOf2((C1 ^ C2)) /\ (isPowerOf2((neg(C2) ^ neg(C1))) /\ (((neg(C2) ^ neg(C1)) = ((C3 -i C2) ^ (C3 -i C1))) /\ (Abs_th((C1 -i C2)) u> C3)))))))] ;
    Or(icmp_ule(add_i29(A, C1), C3), icmp_ule(add(A, C2), C3)) -> icmp_ule(add(And(A, ~(CL0)), umax(C1, C2)), C3)  [ (((C1 ^ C2) = CL0) /\ ((C1 u> C3) /\ ((C2 u> C3) /\ (isPowerOf2((C1 ^ C2)) /\ (isPowerOf2((neg(C2) ^ neg(C1))) /\ (((neg(C2) ^ neg(C1)) = ((C3 -i C2) ^ (C3 -i C1))) /\ (Abs_th((C1 -i C2)) u> C3)))))))] ;
    Or(icmp_ugt(a, b), icmp_eq(a, b)) -> icmp_uge(a, b);
    Or(icmp_uge(a, b), icmp_ne(a, b)) -> True;
    Or(icmp_eq(B, #x00000000), icmp_ult(A, B)) -> icmp_uge(add(B, #xffffffff), A);
    Or(icmp_eq(B, #x00000000), icmp_ugt(B, A)) -> icmp_uge(add(B, #xffffffff), A);
    Or(icmp_ne(A, #x00000000), icmp_ne(B, #x00000000)) -> icmp_ne(Or(A, B), #x00000000);
    Or(icmp_ult(add(X, C3), C1), icmp_eq(X, C2)) -> icmp_ule(add(X, C3), C1)  [ ((C2 +i C3) = C1)] ;
    Or(icmp_eq(X, C1), icmp_eq(X, C2)) -> icmp_eq(And(X, ~(CL0)), C1)  [ (((C1 ^ C2) = CL0) /\ ((C1 u< C2) /\ isPowerOf2((C1 ^ C2))))] ;
    Or(icmp_eq(X, C1), icmp_eq(X, C2)) -> icmp_ult(add(X, neg(C1)), #x00000002)  [ (C1 = (C2 -i #x00000001))] ;
    Or(icmp_eq(X, C1), icmp_ne(X, C2)) -> icmp_ne(X, C2)  [ (C1 u< C2)] ;
    Or(icmp_eq(X, C1), icmp_ult(X, C2)) -> icmp_ult(X, C2)  [ (C1 u< C2)] ;
    Or(icmp_eq(X, C1), icmp_slt(X, C2)) -> icmp_slt(X, C2)  [ (C1 i< C2)] ;
    Or(icmp_ne(X, C1), icmp_eq(X, C2)) -> icmp_ne(X, C1)  [ (C1 u< C2)] ;
    Or(icmp_ne(X, C1), icmp_ugt(X, C2)) -> icmp_ne(X, C1)  [ (C1 u< C2)] ;
    Or(icmp_ne(X, C1), icmp_sgt(X, C2)) -> icmp_ne(X, C1)  [ (C1 i< C2)] ;
    Or(icmp_ne(X, C1), icmp_ne(X, C2)) -> True  [ (C1 u< C2)] ;
    Or(icmp_ne(X, C1), icmp_ult(X, C2)) -> True  [ (C1 u< C2)] ;
    Or(icmp_ne(X, C1), icmp_slt(X, C2)) -> True  [ (C1 i< C2)] ;
    Or(icmp_ult(X, C1), icmp_ugt(X, C2)) -> icmp_ult(X, C1)  [ ((C1 u< C2) /\ (C2 = #xffffffff))] ;
    Or(icmp_ult(X, C1), icmp_ne(X, C2)) -> icmp_ne(X, C2)  [ (C1 u< C2)] ;
    Or(icmp_ult(X, C1), icmp_ult(X, C2)) -> icmp_ult(X, C2)  [ (C1 u< C2)] ;
    Or(icmp_slt(X, C1), icmp_sgt(X, C2)) -> icmp_slt(X, C1)  [ ((C1 i< C2) /\ (C2 = (#x00000001 << (width(C2) -i #x00000001))))] ;
    Or(icmp_slt(X, C1), icmp_ne(X, C2)) -> icmp_ne(X, C2)  [ (C1 i< C2)] ;
    Or(icmp_slt(X, C1), icmp_slt(X, C2)) -> icmp_slt(X, C2)  [ (C1 i< C2)] ;
    Or(icmp_ugt(X, C1), icmp_eq(X, C2)) -> icmp_ugt(X, C1)  [ (C1 u< C2)] ;
    Or(icmp_ugt(X, C1), icmp_ugt(X, C2)) -> icmp_ugt(X, C1)  [ (C1 u< C2)] ;
    Or(icmp_ugt(X, C1), icmp_ne(X, C2)) -> True  [ (C1 u< C2)] ;
    Or(icmp_ugt(X, C1), icmp_ult(X, C2)) -> True  [ (C1 u< C2)] ;
    Or(icmp_sgt(X, C1), icmp_eq(X, C2)) -> icmp_sgt(X, C1)  [ (C1 i< C2)] ;
    Or(icmp_sgt(X, C1), icmp_sgt(X, C2)) -> icmp_sgt(X, C1)  [ (C1 i< C2)] ;
    Or(icmp_sgt(X, C1), icmp_ne(X, C2)) -> True  [ (C1 i< C2)] ;
    Or(icmp_sgt(X, C1), icmp_slt(X, C2)) -> True  [ (C1 i< C2)] ;
    Or(And(Or(A, B), C1), And(B, C2)) -> Or(And(A, C1), B)  [ ((C1 ^ C2) = #xffffffff)] ;
    Or(And(Xor(A, B), C1), And(B, C2)) -> Xor(And(A, C1), B)  [ ((C1 ^ C2) = #xffffffff)] ;
    Or(And(x, C1), C) -> And(Or(x, C), CL0)  [ (((C | C1) = CL0) /\ ((C & C1) != #x00000000))] ;
    Or(Xor(x, C1), C) -> Xor(Or(x, C), CL0)  [ ((C1 & ~(C)) = CL0)] ;
    Or(Xor(A, C1), op1) -> Xor(Or(A, op1), C1)  [ MaskedValueIsZero(op1, C1)] ;
    Or(And(Xor(A, #xffffffff), B), A) -> Or(A, B);
    Or(And(A, B), Xor(A, #xffffffff)) -> Or(Xor(A, #xffffffff), B);
    Or(And(A, Xor(B, #xffffffff)), Xor(A, B)) -> Xor(A, B);
    Or(And(Or(B, V2), C1), And(B, C2)) -> And(Or(B, V2), CL0)  [ (((C1 | C2) = CL0) /\ (((C1 & C2) = #x00000000) /\ MaskedValueIsZero(V2, ~(C1))))] ;
    Or(And(Or(V1, C3), C1), And(Or(V1, C4), C2)) -> And(Or(V1, CL0), CL1)  [ (((C1 | C2) = CL1) /\ (((C3 | C4) = CL0) /\ (((C1 & C2) = #x00000000) /\ (((C3 & ~(C1)) = #x00000000) /\ ((C4 & ~(C2)) = #x00000000)))))] ;
    Or(And(A, Xor(D, #xffffffff)), And(Xor(A, #xffffffff), D)) -> Xor(A, D);
    Or(Xor(A, B), Xor(Xor(B, C), A)) -> Or(Xor(A, B), C);
    Or(And(Or(B, C), A), B) -> Or(B, And(A, C));
    Or(Xor(A, #xffffffff), Xor(B, #xffffffff)) -> Xor(And(A, B), #xffffffff);
    Or(op0, Xor(op0, B)) -> Or(op0, B);
    Or(A, Xor(Xor(A, #xffffffff), B)) -> Or(A, Xor(B, #xffffffff));
    Or(And(A, B), Xor(A, B)) -> Or(A, B);
    Or(A, Xor(Or(A, B), #xffffffff)) -> Or(A, Xor(B, #xffffffff));
    Or(A, Xor(Xor(A, B), #xffffffff)) -> Or(A, Xor(B, #xffffffff));
    Or(And(A, B), Xor(Xor(A, #xffffffff), B)) -> Xor(Xor(A, #xffffffff), B);
    Or(zext(A), zext(B)) -> zext(Or(A, B));
    Or(sext(A), sext(B)) -> sext(Or(A, B));
    Or(trunc(A), trunc(B)) -> trunc(Or(A, B));
    Or(sext_i1(A), op1) -> select(A, #xffffffff, op1);
    Or(Or(A, C1), op1) -> Or(Or(A, op1), C1);
    Or(select(x, A, B), select(x, C, D)) -> select(x, Or(A, C), Or(B, D));
    Xor(And(Xor(nx, #xffffffff), y), #xffffffff) -> Or(nx, Xor(y, #xffffffff));
    Xor(Or(Xor(nx, #xffffffff), y), #xffffffff) -> And(nx, Xor(y, #xffffffff));
    Xor(And(x, y), #xffffffff) -> Or(Xor(x, #xffffffff), Xor(y, #xffffffff));
    Xor(Or(x, y), #xffffffff) -> And(Xor(x, #xffffffff), Xor(y, #xffffffff));
    Xor(ashr(Xor(x, #xffffffff), y), #xffffffff) -> ashr(x, y);
    Xor(icmp_slt(x, y), #xffffffff) -> icmp_sge(x, y);
    Xor(zexti11(icmp_slt(x, y)), #x00000001) -> zext(icmp_sge(x, y));
    Xor(sexti11(icmp_slt(x, y)), #xffffffff) -> sext(icmp_sge(x, y));
    Xor(sub(C, x), #xffffffff) -> add(x, CL0)  [ ((#xffffffff -i C) = CL0)] ;
    Xor(add(x, C), #xffffffff) -> sub(CL0, x)  [ ((#xffffffff -i C) = CL0)] ;
    Xor(add(x, C), C1) -> add(x, CL0)  [ (((C +i C1) = CL0) /\ isSignBit(C1))] ;
    Xor(Or(x, C1), C2) -> Xor(x, CL0)  [ (((C1 ^ C2) = CL0) /\ MaskedValueIsZero(x, C1))] ;
    Xor(lshr(Xor(x, C1), C2), C3) -> Xor(lshr(x, C2), CL0)  [ ((lshr_th(C1, C2) ^ C3) = CL0)] ;
    Xor(Or(a, op1), op1) -> And(a, Xor(op1, #xffffffff));
    Xor(And(a, op1), op1) -> And(Xor(a, #xffffffff), op1);
    Xor(And(a, b), Or(a, b)) -> Xor(a, b);
    Xor(Or(a, Xor(b, #xffffffff)), Or(Xor(a, #xffffffff), b)) -> Xor(a, b);
    Xor(And(a, Xor(b, #xffffffff)), And(Xor(a, #xffffffff), b)) -> Xor(a, b);
    Xor(Xor(a, c), Or(a, b)) -> Xor(And(Xor(a, #xffffffff), b), c);
    Xor(And(a, b), Xor(a, b)) -> Or(a, b);
    Xor(And(a, Xor(b, #xffffffff)), Xor(a, #xffffffff)) -> Xor(And(a, b), #xffffffff);
    Xor(icmp_ule(a, b), icmp_ne(a, b)) -> icmp_uge(a, b);
    Xor(zext(a), zext(b)) -> zext(Xor(a, b));
    Xor(sext(a), sext(b)) -> sext(Xor(a, b));
    Xor(trunc(a), trunc(b)) -> trunc(Xor(a, b));
    zext_11(X0) -> zext(X0);
    icmp_ugt(X0, X1) -> icmp(X0, X1);
    add_i29(X0, X1) -> add(X0, X1);
    sext_i1(X0) -> sext(X0);
    icmp_sgt(X0, X1) -> icmp(X0, X1);
    sext_11(X0) -> sext(X0);
    icmp_slt(X0, X1) -> icmp(X0, X1);
    icmp_ule(X0, X1) -> icmp(X0, X1);
    icmp_uge(X0, X1) -> icmp(X0, X1);
    trunc_11(X0) -> trunc(X0);
    icmp_eq(X0, X1) -> icmp(X0, X1);
    icmp_ne(X0, X1) -> icmp(X0, X1);
    icmp_sge(X0, X1) -> icmp(X0, X1);
    icmp_ult(X0, X1) -> icmp(X0, X1);

NON-STANDARD IRREGULAR

QUERY loops
